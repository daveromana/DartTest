<presentation language="ja">
<slide page="1">
<body>
<p>
コンパイラ
湯淺太一
</p>
</body>
</slide>
<slide page="2">
<body>
<p>
第２章
字 　句 　解 　析
</p>
</body>
</slide>
<slide page="3">
<body>
<p>
文字列の計算
アルファベット：言語を構成する文字の（有限）集合
文字列 文字の並び
空の文字列 文字を一つも含まない文字列
文字列の連結
例：
結合則 が成り立つ
と書いてよい
と略記することもある
文字列のべき乗
公式
</p>
</body>
</slide>
<slide page="4">
<body>
<p>
文字列集合の連結
例：
結合則 が成り立つ
と書いてよい
と略記することがある
文字列集合のべき乗
例： のとき
公式
と空集合
</p>
</body>
</slide>
<slide page="5">
<body>
<p>
文字列集合の正の閉包
例：
文字列集合の閉包
例：
公式
例：Ｃ言語における 進定数
</p>
</body>
</slide>
<slide page="6">
<body>
<p>
正規表現
アルファベット 上の正規表現
（ は正規表現）
（ は正規表現）
（ は正規表現）
：正規表現 が表す文字列集合
例： は， 上の正規表現． と略記
</p>
</body>
</slide>
<slide page="7">
<body>
<p>
正規表現 の解釈
： が省略可能
： 自体
： または
： のあとに
： が 個以上
略記法
Ｃ言語の字句要素
識別子
キーワード
演算子
区切り記号
進定数 オプション
浮動小数点定数 指数部 指数部
文字定数 文字 と と改行以外
ここで，
オプション
指数部
</p>
</body>
</slide>
<slide page="8">
<body>
<p>
有限オートマトン
有限個の状態を持ち，文字を１文字ずつ読み込むことによって，自分自身
の状態を変化させる，一種の仮想計算機
は五つ組 で定義
アルファベット
状態全体の集合
状態遷移 の集合
状態 で を読んだら状態 に遷移
初期状態
受理状態の集合
状態遷移図
i n t
21 3 4
2
b
a
1
</p>
</body>
</slide>
<slide page="9">
<body>
<p>
入力文字列
次の条件を満たす状態列 が存在するとき， は を受理 する．
が受理する文字列全体
が受理する言語
例：
i n t
21 3 4
2
b
a
1
のとき， と は等価
</p>
</body>
</slide>
<slide page="10">
<body>
<p>
決定性 有限オートマトン
任意の と に対して， の形の状態遷移が高々一つ
の状態遷移関数
のとき
その他の場合
が与えられれば，
を と表記することがある．
適用例 ：受理するかどうかの判定
入力文字列
，
かつ ならば，
，
とし，このステップ を繰り返す．
かつ であれば と表示し，そうでなければ と表示する．
</p>
</body>
</slide>
<slide page="11">
<body>
<p>
適用例 ：文字列の切り出し
入力文字列
， ， （初期状態）
であれば，
なら， とし，ステップ へ戻る．そうでなければ，
の値を返す．
例：
2
b
a
1
入力文字列が のとき
</p>
</body>
</slide>
<slide page="12">
<body>
<p>
非決定性有限オートマトン
遷移
εq q’
状態 に達したときに，入力文字列と無関係に，
へ遷移してよい． に留まってもよい．
非決定性 有限オートマトン
次のいずれかを満たす
が 遷移を含む．
ある と に対して， の形の状態遷移が， の中に複数存在
する．
例
2
b
a
1 3
ε
b
a
1
2 3
a 4
</p>
</body>
</slide>
<slide page="13">
<body>
<p>
次の条件をすべて満たす経路
が存在するとき， は，文字列 を受理する．
から を除去すると と一致する．
例
に対して
に対して
2
b
a
1 3
ε
に対して
に対して
b
a
1
2 3
a 4
</p>
</body>
</slide>
<slide page="14">
<body>
<p>
正規表現から への変換
：正規表現
：
のとき， と は等価
正規表現 を，等価な に変換
を，等価な に変換
を，等価な に変換
を，状態数最小の等価な に変換
</p>
</body>
</slide>
<slide page="15">
<body>
<p>
正規表現から への変換
正規表現 に対する標準形
s f( )M r
初期状態への遷移は存在しない
受理状態は一つだけ
受理状態からの遷移は存在しない
</p>
</body>
</slide>
<slide page="16">
<body>
<p>
εs f
s f
ia
ε
εε
ε
fs
2f2s
1f1s ( )M 1r
( )M 2r
ε
2f2s1f1s ( )M 1r ( )M 2r
ε
ε
ε fs 1f1s ( )M 1r
</p>
</body>
</slide>
<slide page="17">
<body>
<p>
例：
と
a b a
b
ε ε
ε ε
ε
ε
a
b
ε ε
ε ε
ε
a
ε
ε
a
b
ε ε
ε ε
ε
bε ε
s 1
2 3
f
5
6
4
7 8 9 10
</p>
</body>
</slide>
<slide page="18">
<body>
<p>
から への変換
a
ε
ε
a
b
ε ε
ε ε
ε
bε ε
8 9 107
s 1
2
4 5
3
6
a
ε
ε
a
b
ε ε
ε ε
ε
bε ε
8 9 107
s 1
2
4 5
3
6
a
ε
ε
a
b
ε ε
ε ε
ε
bε ε
8 9 107
s 1
2
4 5
3
6
a
ε
ε
a
b
ε ε
ε ε
ε
bε ε
8 9 107
s 1
2
4 5
3
6
f
f
f
f
a
a a
a
b
b b
b
a
b
ab b
a
a
b
</p>
</body>
</slide>
<slide page="19">
<body>
<p>
状態数最小の
21
a
b
ab b
a
a
3
b
4
21,3
a
b
b
a
a
b
4
アルゴリズム
受理状態とその他の２グループに分ける．
同一文字に対する遷移先が異なる状態を，別グループに分ける．
21
a
b
ab b
a
a
3
b
4 21
a
b
ab b
a
a
3
b
4
</p>
</body>
</slide>
<slide page="20">
<body>
<p>
字句解析プログラム
正規表現以外の規則
最も長い字句要素を切り出す．
例
字句要素の種類ごとに優先度を設ける．
例 は識別子ではなく，キーワード
</p>
</body>
</slide>
<slide page="21">
<body>
<p>
字句構造全体の
字句要素の種類ごとの正規表現
の では種類がわからない
種類ごとのマーカ 各受理状態に適切なマーカをつける
種類ごとに を求め，受理状態にマーカをつける
im
is if( )irM
新しい初期状態 を用意し，全体の を作成．
ε
ε
1s ( )M 1r 1f
s
nf( )nrM
mn
ns
1m
を に変換．
個々の受理状態には，優先度最大のマーカを残す．
状態数最小の を作成．
ただし，マーカの異なる受理状態は別グループ．
</p>
</body>
</slide>
<slide page="22">
<body>
<p>
例
キーワード
識別子 英字 英数字
空白 スペース
fi 1
英字
ε
ε
ε
スペース
スペース
3
2
英数字
i
スペース
英数字
f2 1
2 英数字
スペース
3
f 以外の  
     英数字
i 以外の英字
</p>
</body>
</slide>
<slide page="23">
<body>
<p>
状態遷移表
状態遷移関数 を表にしたもの
ma1a
1q
nq
iq
ja
δ (    ,     )iq ja
ほとんどの要素が （未定義）
</p>
</body>
</slide>
<slide page="24">
<body>
<p>
状態遷移表の圧縮
Entry Validation
a
1q
nq
q
δ(       )q, a q
Next
以外
</p>
</body>
</slide>
<slide page="25">
<body>
<p>
各ベクタの設定方法
a
b
b
a
a
b
31 2
0
4
Next Validation
97
98
99
100
101
102
2
1
2
3
2
1
1
1
2
2
3
3
2
1
2
3
1
2
1
2
3
97
98
131
0
127
Entry
1
2
3
0
2
42
コードでは， ，
</p>
</body>
</slide>
<slide page="26">
<body>
<p>
字句要素の切り出し
関数
最も長い字句要素を切り出して に格納し，マーカの値を返す．入
力の終りに達していれば， を返す．
0
buf
tomark endfrom
cyytext
ソースファイル
～
これまでに読み込んだ文字列
～
最も長い字句要素
～
前回読み込みすぎた文字列
</p>
</body>
</slide>
<slide page="27">
<body>
<p>
0buf
tomark endfrom
cyytext
ソースファイル
への文字設定
バッファの初期化
</p>
</body>
</slide>
<slide page="28">
<body>
<p>
字句要素の切り出し
その他のサブ関数
状態遷移関数 の値
状態 が受理状態かどうか
受理状態 のマーカ
の値を に保存
</p>
</body>
</slide>
<slide page="29">
<body>
<p>

</p>
</body>
</slide>
<slide page="30">
<body>
<p>
エラーリカバリ（次の空白まで読み飛ばす）
</p>
</body>
</slide>
<slide page="31">
<body>
<p>
字句解析の自動化
と
</p>
</body>
</slide>
<slide page="32">
<body>
<p>

</p>
</body>
</slide>
<slide page="33">
<body>
<p>
から正規表現への変換
から へ， だけを通過して遷移させる文字列全体の集合
～
のとき
～ ～
～
のとき
のとき
のとき
の状態数
この集合式を正規表現に変換する
iq 1q
kq
jqk-1q
</p>
</body>
</slide>
<slide page="34">
<body>
<p>
例a
b
b
a
a
b
31 2
と等価な正規表現は，
</p>
</body>
</slide>
<slide page="35">
<body>
<p>
例：コメントの正規表現
/
53 421
/
＊以外の文字
＊と /  以外の文字
＊ ＊
＊
以外の文字
と 以外の文字 以外の文字
状態番号の と を入れ替えると
以外の文字 と 以外の文字
</p>
</body>
</slide>
<slide page="36">
<body>
<p>
正規表現の限界
正規表現では表せない文字列集合の例
正規表現 で表せたと仮定する
の状態数
を受理する の経路
なる が存在する
から への経路をカットすると
は も受理する 矛盾
文脈自由文法なら
</p>
</body>
</slide>
</presentation>
